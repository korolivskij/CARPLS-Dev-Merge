/****
**    Servio Consulting, LLC.
** Alex Grinevich
** 2016/03/11
**
** Description: TEST_vfCase_CREATE part 3.
****/
@isTest(SeeAllData=false)
public class TEST_vfCase_CREATE3 {

    public static   User                uTstExecUser                { get; set; }
    public static   ctrlCaseDetail      ctrl              			{ get; set; }
    public static   PageReference       prCase                      { get; set; }
    public static   Contact             newClient                   { get; Set; }   
    public static   Search_Log__c       newSlClient                 { get; set; }
    public static   Case                newCase                     { get; Set; }
    public static   List<Case_Party__c> newCaseParties              { get; Set; }
  //  public static   ContentVersion      newContentV
    
    public static   CaseUtils			caseUtils					{ get; set; }
    /**
     * Executed by SFDC when running unit test code via GUI
     */
    public static testMethod void executeTest() {

        prCase = Page.vfCaseDetail;
        /* 
         *  Just pass blank parms for user now. This is a luxury that I wish we had but we may
         *  run out of time before we can test multiple users / roles / profiles via code.
         *  In the above scenario, a user will be created on the fly and is a system admin
         *  with no roles / permission sets applied.
         * 
         *  @TODO maybe pull testing user from custom setting.
         *  @TODO maybe create different users from different roles / profiles on the fly
         */
        coreExecution('', '', '', '');
    }
    /**
     * The core launch point for this test class.
     */
    public static void coreExecution(String sUserId, String sProfileId, String sRoleId, String sPermSetId) {
        caseUtils = new CaseUtils();
        Datetime   dtTstStart        = Datetime.now();
        
        //-- Get testing user ---
        TEST_TestUtils.SecSettings sec = new TEST_TestUtils.SecSettings(sUserId, sProfileId,sRoleId, sPermSetId );
        uTstExecUser = TEST_TestUtils.getUserForTest(sec, dtTstStart);
        System.debug(logginglevel.warn, ' ---------------> Running Test with User:'+uTstExecUser);
        
        //-- If no org level custom setting a new one will be created.. 
        TEST_TestUtils.ensureCustomSettingsExist(uTstExecUser);
        Carplsv20Settings__c customSetting = Carplsv20Settings__c.getInstance(uTstExecUser.id);
        System.debug(logginglevel.warn, ' ---------------> Running Test with Custom Settings:'+customSetting);
        
        buildTestData(); //<--- Build Any needed clients / and caseparties / contacts.. 
        
        /*
         *-- START THE actual TEST (Be ware of too many SOQL Queries / Gov Limits below!)---------------
         */ 
        Test.startTest();
        
            System.runAs(uTstExecUser) {  
            	                            
                //testNewCasePCSelection();//51 queries
                testAddServiceAndSummaryReview(newCase);//68 queries
                //testCaseDocUploadComponent(newCase); //moved into TEST_vfCase_CREATE2
                //---@todo testAddServiceAndSummaryButCancel();
                
               //------ testResumeCase(); @TODO Describe Gov limit hit.. check fields queried for conflict log.. too many of them.
               testResumeCase();

                ctrl.doSaveAndClose();
            
                System.debug(logginglevel.error,'\n\n\n--------> UNIT TEST TOTAL SOQL QUERIES='+Limits.getQueries());   
                
                 
            }
                
        Test.stopTest();
        /*
         *-- STOP THE TEST ---------------------------------------------------------------------------------
         */
    }
    /**
     * Choose a Problem Code. Select a Subject. Enter Case Question (Case Profile) Data and Description.
     * Click Save And Continue on to the new service page.
     */
   
    /*
     * Just manually insert a new service.. refresh the case detail controller
     */
    private static void testAddServiceAndSummaryReview(Case c) {
    	Consultation__c service = caseUtils.buildNewService(c);
    	insert service; 
    	//refreshPrimaryAndCloseSub() js in onclick of save service.
 		prCase = Page.vfCaseDetail;
        Test.setCurrentPage(prCase); 
        Map<String,String> mParms = prCase.getParameters();
        mParms.put('id',newCase.id);
        mParms.put('review','true');
        ctrl = new ctrlCaseDetail(new ApexPages.StandardController(newCase));    	
        
        ctrl.doEditDetail();
        ctrl.doCancelEdit();
        ctrl.doEditDetail();
        
              
        //@todo modify some edit attributes
        ctrl.doSaveAndContinueCurrentPage();    
        //doaddparty //doesn't exist.. 
        //log activity (Standard page.. not much to test but create one anyway)
		//newSubActivity('/00T/e?title=Call&who_id={!cse.contact.Id }&what_id={!cse.Id}&followup=1&tsk5=Call&isdtp=vw','Log a Call'
		//
		ctrl.doConflictNo();
        ctrl.doConflictYes();
        
        Task t = new Task();
		t.WhatId = c.id;
		t.WhoId = c.contact.id;
		t.Type = 'Call';
		t.Subject = 'Call';
		insert t;		        
              	
    }
    private static void testResumeCase() {
		///apex/vfCaseDetail?id={!cse.id}&review=false&resumeCase=true&fromSearch=false&tempCase=false','Resume: {!cse.caseNumber}');return false;"                                      	
 		prCase = Page.vfCaseDetail;
        Test.setCurrentPage(prCase); 
        Map<String,String> mParms = prCase.getParameters();
        mParms.put('id',newCase.id);
        mParms.put('tempCase','false');
        mParms.put('fromSearch','false');
        mParms.put('review','false');
        mParms.put('resumeCase','true');
        ctrl = new ctrlCaseDetail(new ApexPages.StandardController(newCase));   
        system.assert(ctrl.isResumeCase);
        
        caseUtils.addLeftOpenCasesPosts(new List<Case>{newCase});
         	
            	
    }
    private static void testCaseQuestionsComponent(Boolean isEditable,Boolean isEditMode, Case c) {
        ctrlCaseQuestions ctrlQComponent = new ctrlCaseQuestions();
        ctrlQComponent.setCaseId(c.id);
        ctrlQComponent.setPisEditMode(isEditMode);
        ctrlQComponent.pAllowEditMode = isEditable;
        ctrlQComponent.doInitCaseQuestions();
        //system.assert(ctrlQComponent.getDoQuestionsExist());  	
        
        //-- Add additional coverage of what appears to be an unused utils method
        
        ProblemCodeWrapper pcWrap = new ProblemCodeWrapper();
        pcWrap.practiceArea = 'pa1';
        pcWrap.problemCategory = 'pcat1';
        pcWrap.problemCode = 'pc1';
        
        CaseQuestionUtils.retrieveCaseQs(null);
        List<Consultation_Question__c> qs = CaseQuestionUtils.retrieveCaseQs(pcWrap);
        List<Consultation_Question__c> qs1 = CaseQuestionUtils.retrieveCaseQs(new ProblemCodeWrapper());
              
        
        //put answer in input field
        //<apex:inputField value="{!cse[qWrap.apiFieldName]}" required="{!qWrap.required}"/>        
        for(DynaQaWrapper dqa : ctrlQComponent.cseQaWraps) {
        	
        	Schema.SobjectField field = Utilities.findSObjectFieldbyId(ctrlQComponent.getCaseId(),dqa.apiFieldName);
        	Schema.Displaytype fieldType = field.getDescribe().getType();
        	//--- @TODO Probably a better way to introspect this.
        	Object answer;  	
        	if(fieldType == Schema.DisplayType.String) {
        		answer = String.valueOf('Unit Test Q');
        	} else if (fieldType == Schema.DisplayType.Integer) {
        		answer = Integer.valueOf(100);
        	} else if (fieldType == Schema.DisplayType.Double) {
        		answer = Double.valueOf(100);
        	} else if (fieldType == Schema.DisplayType.Currency) {
        		//answer = (Object)Currency.newInstance(100.00,'????'); //what is this string parm looking for?
        	}
        	dqa.getRequired();
        	
        	//-- @TODO add more types.        	        	
        	ctrlQComponent.cse.put( dqa.apiFieldName, answer) ;        	
        }   
        ctrlQComponent.doSaveCaseQuestions();
        //-- assert dynamically select all fields and make sure not null
        ctrlQComponent.doCancelEditMode();
        ctrlQComponent.getPisEditMode();
        ctrlQComponent.doEditMode();
        ctrlQComponent.doClearDebugMessages();     
        ctrlQComponent.setComponentController(ctrl.getMyComponentController());            
    }  
    /**
     *
     */
  
    private static void buildTestData() {        
        
        newClient = TEST_TestUtils.createContact('Client');
        
        newSlClient = new Search_Log__c(last_name__c = 'Unit Test Last');
        insert newSlClient;
        newCase = TEST_TestUtils.createNewClientPartyCase(newClient);
        newCaseParties = caseUtils.retrieveCaseParties(newCase);
        
        
		Subject__c newSubject = new Subject__c();
    	
    	newSubject.Title__c = 'Unit Test Case Subject';
    	newSubject.Practice_Area__c = 'pa1';
    	newSubject.Problem_Category__c = 'pcat1';
    	newSubject.Problem_Code__c = 'pc1';
    	newSubject.Jurisdiction__c = 'jur1';
    	newSubject.Status__c = 'Active';
    	newSubject.Type__c = 'Pending';
    	newSubject.Litigation__c = 'Pending';
    	//newSubject.Show_Litigation_Questions__c = true;
    	insert newSubject;     
    	
    	Consultation_Question__c caseQ = new Consultation_Question__c();
    	caseQ.Case_Answer_Field_Name__c = 'answer_Amount_of_monthly_rent__c';
    	caseQ.Question__c = 'Unit Test Case Question1';
    	caseQ.name__c = 'Unit Test Case Question Name1';
    	insert caseQ;

    	Consultation_Question__c caseQ2 = new Consultation_Question__c();
    	caseQ2.Case_Answer_Field_Name__c = 'answer_court_case_nbr__c';
    	caseQ2.Question__c = 'Unit Test Case Lit Question1';
    	caseQ2.name__c = 'Unit Test Case Lit Question Name1';
    	insert caseQ2;

    	
    	Question_Subject_Junction__c qsj = new Question_Subject_Junction__c();
    	qsj.Case_Question__c = caseQ.id;
    	qsj.Subject__c = newSubject.id;
    	insert qsj;
    	
    	Question_Subject_Junction__c qsj2 = new Question_Subject_Junction__c();
    	qsj2.Case_Question__c = caseQ.id;
    	qsj2.Subject__c = newSubject.id;
    	insert qsj2;    	
    	   
        TEST_TestUtils.debugSObj(newCase);  
        TEST_TestUtils.debugSObjs(newCaseParties);    
    }    
	

    
    
}