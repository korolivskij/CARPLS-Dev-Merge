/****
**    Servio Consulting, LLC.
** Alex Grinevich
** 2016/23/09
**
** Rev. 2016/23/09: created
** Rev. 2016/12/16: Erica Cox - changed to only remove invalid categories. Having several batches in one scheduled job was causing concurrency issues.
** 
** Usage: ScheduleContactCleanup
** 
** Description: Cleanup invalid Contact category.
****/
global class BatchCleanupInvalidContactCategory implements DataBase.Batchable<sObject> {
    
    String soqlUpdate;
	List<String>  lSendToEmails; 
    
    String oldC;
    String oldCx;

        
    global BatchCleanupInvalidContactCategory(String sUpdate, String oldCategory,
                                               List<String> sendToEmails){
    	if(sendToEmails == null || sendToEmails.isEmpty()) {
 			lSendToEmails = new List<String>{'Erica.cox@servioconsulting.com'};
 		} else {
 			lSendToEmails = sendToEmails;
 		}
        soqlUpdate = sUpdate;
        oldC = oldCategory;
        oldCx = oldCategory+';'; 
                                                   
        String msg = '\r------ BatchCleanupInvalidContactCategory Constructor --------\r';
        msg += '--> SOQL Update='+sUpdate + '\r';
        msg += '-->  sendToEmail ='+lSendToEmails;
        System.debug(logginglevel.info, msg);
    }

    global Database.querylocator start(Database.BatchableContext BC){
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();

        mail.setToAddresses(lSendToEmails);
        mail.setSenderDisplayName('Carpls Salesforce Automation');
        
        mail.setSubject('Contact Cleanup / Change invalid contact category \''+ oldC + '\' process Initiated');
        mail.setPlainTextBody('Initiating process.');
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });

        return Database.getQueryLocator(soqlUpdate);
    }
    
    global void execute(Database.BatchableContext BC, 
                       List<sObject> scope){
        
        Id jobId = BC.getJobId();   
                       	
    	if(scope != null && !scope.isEmpty()) { 
    		Integer iScopeSize = scope.size();
            
            List<Contact> clist = (List<Contact>)scope;
            List<Contact> listToUpdate = new List<Contact>();
             
            for(Contact c : clist)
            {
                //System.debug('Batch.Execute:c.Id:' + c.Id);
                System.debug('c.Category__c before replace:' + c.Category__c);
                //remove oldCategory if there is one
                if (c.Category__c != null) {
                	c.Category__c = c.Category__c.Replace(oldCx, '');                	
                	c.Category__c = c.Category__c.Replace(oldC, '');
                }
                
                System.debug('c.Category__c after replace:' + c.Category__c);
  				listToUpdate.add(c);
            }
            
            if(!listToUpdate.isEmpty())
               update listToUpdate;
            
            
      		String msg = '\r------ BatchCleanupInvalidContactCategory Execute() --------\r';
            msg += '--> jobId='+jobId + '\r';
            msg += '--> scopeSize='+iScopeSize;
            System.debug(logginglevel.info, msg);
    	} 
   }
    
    global void finish(Database.BatchableContext BC){
        AsyncApexJob a = [SELECT Id, Status, NumberOfErrors, JobItemsProcessed,
                        TotalJobItems, CreatedBy.Email
                        FROM AsyncApexJob WHERE Id =
                            :BC.getJobId()];
        String dmsg = '\r------ BatchCleanupInvalidContactCategory Finish() --------\r';
        Id jobId = BC.getJobId();
        String sStatus = a.status;
        dmsg += '--> jobId='+jobId + '\r';
        dmsg += '--> status='+sStatus;
        System.debug(logginglevel.info, dmsg);                    
        
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
 
        mail.setToAddresses(lSendToEmails);
        mail.setSenderDisplayName('Carpls Salesforce Automation');
        
        mail.setSubject('Contact Cleanup / Change invalid contact category \''+ oldC + '\' Process -- '+a.status);
        
        String msg = 'The batch Apex job processed ' + a.TotalJobItems +
                     ' batches with '+ a.NumberOfErrors + ' failures. Exact counts to come in future release';
   
        mail.setPlainTextBody(msg);

        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
    }
}