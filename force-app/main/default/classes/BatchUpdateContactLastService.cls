global class BatchUpdateContactLastService implements DataBase.Batchable<sObject>, Database.Stateful {
    
    String soqlUpdate;
    String status;
    List<String> emailAddys;
    static String baseUrl =  URL.getSalesforceBaseUrl().toExternalForm();
    
    global List<SObject> sObjectsQueried = new List<SObject>();
    global Integer iRowsProcessed = 0;
    global Integer iRowsUpdated = 0;
    global Boolean bCommitTrans = false;
    global String  sServiceStatus {get; set;}
   

        
    global BatchUpdateContactLastService (String sUPDATE, List<String> pEmailAddys,  String sStatus, Boolean pCommitTrans ){
            emailAddys = pEmailAddys;
            soqlUpdate = sUPDATE;
            bCommitTrans = pCommitTrans;
            sServiceStatus = sStatus;
    }

    global Database.querylocator start(Database.BatchableContext BC){
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();

        mail.setToAddresses(emailAddys);
        mail.setSenderDisplayName('CARPLS Salesforce.com Automation');
        
        mail.setSubject('Salesforce.com Batch UPDATE Contact Last Svc Stuff - Initiating Process');
        mail.setPlainTextBody('Initiating UPDATE process for: '+ soqlUpdate);
        mail.setHtmlBody('Initiating UPDATE Process for: '+soqlUpdate);
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });

        return Database.getQueryLocator(soqlUpdate);
    }
    
    global void execute(Database.BatchableContext BC, 
                       List<sObject> scope){
        if(scope != null && !scope.isEmpty()) {
            
            //rowsProcessed += scope.size();
            List<SObject> sObjects = scope;         

            
            if(sObjects!= null && !sObjects.isEmpty()) {
                	List<Contact> cs = new List<Contact>();
                	for(Sobject so : sObjects) {
                		Contact c = (Contact)so;
                		Consultation__c  clientLatestService = c.consultations__r[0];
						c.last_service_by__c = clientLatestService.createdbyId;
    					c.last_service_date__c = clientLatestService.Service_End_Time__c;
    					c.Last_Service_Info_Batch_Updated__c = true;                		
						cs.add(c);	
               		 		
                	}
                    try {
                        Savepoint sp = Database.setSavepoint();
                        UPDATE cs;
                        iRowsUpdated += sObjects.size();
                        if(!bCommitTrans) {
                            Database.rollback(sp);
                        }                       
                    
                    } catch (DmlException dmlEx) {
                        System.debug(logginglevel.error, dmlEx);
                        sendErrorEmail(dmlEx.getMessage(), dmlEx.getStackTraceString(), emailAddys);
                    } catch (Exception e) {
                        System.debug(logginglevel.error, e);
                        sendErrorEmail(e.getMessage(), e.getStackTraceString(), emailAddys);
                    }
            
            }                       
        }
   }
    
    global void finish(Database.BatchableContext BC){
        AsyncApexJob a = [SELECT Id, Status, NumberOfErrors, JobItemsProcessed,
                        TotalJobItems, CreatedBy.Email
                        FROM AsyncApexJob WHERE Id =
                            :BC.getJobId()];
        
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
 
        mail.setToAddresses(emailAddys);
        mail.setSenderDisplayName('CARPLS Salesforce.com Automation - Batch UPDATE');
        
        mail.setSubject('CARPLS Salesforce.com Batch UPDATE - Client Last Service Status: -- '+a.status);
        String msg = '<html><body>';
        msg =   'The batch Apex job processed ' + a.TotalJobItems +
                ' batches with '+ a.NumberOfErrors + ' failures.';
        
        msg += '<br/><br/><b>Parameters Passed and Execution Counters:</b>';         
        msg += '<br/>=========================================================================';
        msg += '<br/>=';             
        msg += '<br/>=   soqlUpdate parm                  = '+soqlUpdate;
        msg += '<br/>=   bCommitTrans parm                = '+bCommitTrans;
        msg += '<br/>=   BaseUrl of Environment Executed =  '+baseUrl;
        msg += '<br/>=';
        msg += '<br/>=   TOTAL # of records UPDATED  => ' + iRowsUpdated;       
        msg += '<br/>=';
        if(bCommitTrans){   
            msg += '<br/>=<font color=blue>   Transaction is Comitted and Database Changes Saved!</font>';      
        } else {
            msg += '<br/>= <font color=red>  xx Tranaction is Rolled Back Per Parm Passed.. No Database Changes Made xx </font> ';
        }            
        msg += '<br/>=========================================================================';             
        msg += '</body></html>';
        mail.setHtmlBody(msg);

        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
    }
    global void sendErrorEmail(String subject, String body, List<String> emailAddys) {
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
 
        mail.setToAddresses(emailAddys);
        mail.setSenderDisplayName('CARPLS Salesforce.com Automation - Batch UPDATE');    
        mail.setSubject('CARPLS Salesforce.com Batch UPDATE Error: -- '+subject);        
        mail.setHtmlBody(body);
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail }); 
    }
}